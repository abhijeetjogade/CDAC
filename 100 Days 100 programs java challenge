1)Java program to find duplicate elements in an array:
import java.util.*;

public class FindDuplicates {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 2, 6, 7, 8, 8};

        Set<Integer> set = new HashSet<>();
        Set<Integer> duplicates = new HashSet<>();

        for (int num : arr) {
            if (!set.add(num)) {
                duplicates.add(num);
            }
        }

        System.out.println("Duplicate elements in the array: " + duplicates);
    }
}
============================================================================================
2)Java program to return the maximum occurring character in the input string:
import java.util.HashMap;
import java.util.Map;

public class MaxOccurringCharacter {
    public static void main(String[] args) {
        String input = "hello";

        Map<Character, Integer> charCount = new HashMap<>();
        char[] chars = input.toCharArray();

        for (char c : chars) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }

        char maxChar = ' ';
        int maxCount = 0;

        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxChar = entry.getKey();
                maxCount = entry.getValue();
            }
        }

        System.out.println("Maximum occurring character: " + maxChar);
    }
}
=====================================================================================
3) Java program to find the second largest element in an array of integers:
import java.util.Arrays;

public class SecondLargest {
    public static void main(String[] args) {
        int[] arr = {1, 3, 5, 7, 9, 2, 4, 6, 8};

        Arrays.sort(arr);
        int n = arr.length;

        if (n < 2) {
            System.out.println("Array doesn't have a second largest element");
        } else {
            System.out.println("Second largest element: " + arr[n - 2]);
        }
    }
}
===========================================================================================
4)Java program to return the duplicate characters from a given string:
import java.util.HashSet;
import java.util.Set;

public class DuplicateCharacters {
    public static void main(String[] args) {
        String input = "hello";

        Set<Character> set = new HashSet<>();
        Set<Character> duplicates = new HashSet<>();

        for (char c : input.toCharArray()) {
            if (!set.add(c)) {
                duplicates.add(c);
            }
        }

        System.out.println("Duplicate characters in the string: " + duplicates);
    }
}
=============================================================================================
5)Java program to check the equality of two arrays:
import java.util.Arrays;

public class ArrayEquality {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3};
        int[] arr2 = {1, 2, 3};

        boolean isEqual = Arrays.equals(arr1, arr2);

        if (isEqual) {
            System.out.println("Arrays are equal.");
        } else {
            System.out.println("Arrays are not equal.");
        }
    }
}
===================================================================================================
6)Java program to remove all the duplicate characters from a given input string:
import java.util.LinkedHashSet;
import java.util.Set;

public class RemoveDuplicates {
    public static void main(String[] args) {
        String input = "hello";

        Set<Character> set = new LinkedHashSet<>();
        StringBuilder result = new StringBuilder();

        for (char c : input.toCharArray()) {
            if (set.add(c)) {
                result.append(c);
            }
        }

        System.out.println("String after removing duplicates: " + result);
    }
}
===========================================================================================================
7)Java program to find all pairs of elements in an integer array whose sum is equal to a given number:
import java.util.*;

public class FindPairs {
    public static void main(String[] args) {
        int[] arr = {2, 4, 3, 5, 7, 8, 9};
        int targetSum = 7;

        Set<Integer> set = new HashSet<>();
        List<List<Integer>> result = new ArrayList<>();

        for (int num : arr) {
            int complement = targetSum - num;
            if (set.contains(complement)) {
                result.add(Arrays.asList(num, complement));
            }
            set.add(num);
        }

        System.out.println("Pairs with sum " + targetSum + ": " + result);
    }
}
============================================================================================================
8)Java program that takes two strings as arguments and removes the characters from the first string:
import java.util.HashSet;
import java.util.Set;

public class RemoveCharacters {
    public static void main(String[] args) {
        String str1 = "hello";
        String str2 = "world";

        Set<Character> set = new HashSet<>();
        for (char c : str2.toCharArray()) {
            set.add(c);
        }

        StringBuilder result = new StringBuilder();
        for (char c : str1.toCharArray()) {
            if (!set.contains(c)) {
                result.append(c);
            }
        }

        System.out.println("String after removing characters: " + result);
    }
}
===============================================================================================================
9)Java program to find continuous subarrays whose sum is equal to a given number:
public class ContinuousSubarrays {
    public static void main(String[] args) {
        int[] arr = {4, 2, -3, 1, 6};
        int targetSum = 3;

        int n = arr.length;
        int currentSum = arr[0];
        int start = 0;

        for (int end = 1; end <= n; end++) {
            while (currentSum > targetSum && start < end - 1) {
                currentSum -= arr[start];
                start++;
            }

            if (currentSum == targetSum) {
                System.out.println("Subarray found between indexes " + start + " and " + (end - 1));
            }

            if (end < n) {
                currentSum += arr[end];
            }
        }
    }
}
=================================================================================================================
10)Java program to test if two given strings are rotations of each other or not:
public class RotationCheck {
    public static void main(String[] args) {
        String str1 = "abcd";
        String str2 = "cdab";

        if (str1.length() != str2.length()) {
            System.out.println("Strings are not rotations of each other.");
        } else {
            String concatenated = str1 + str1;
            if (concatenated.contains(str2)) {
                System.out.println("Strings are rotations of each other.");
            } else {
                System.out.println("Strings are not rotations of each other.");
            }
        }
    }
}
=====================================================================================================================
11)Java program to reverse a string:
public class StringReverse {
    public static void main(String[] args) {
        String str = "hello";
        StringBuilder reversed = new StringBuilder();

        for (int i = str.length() - 1; i >= 0; i--) {
            reversed.append(str.charAt(i));
        }

        System.out.println("Reversed string: " + reversed);
    }
}
===============================================================================================================
12)Java program to find the intersection of two arrays:
import java.util.*;

public class ArrayIntersection {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {4, 5, 6, 7, 8};

        Set<Integer> set1 = new HashSet<>();
        for (int num : arr1) {
            set1.add(num);
        }

        Set<Integer> intersection = new HashSet<>();
        for (int num : arr2) {
            if (set1.contains(num)) {
                intersection.add(num);
            }
        }

        System.out.println("Intersection of arrays: " + intersection);
    }
}
===============================================================================================================
13)Java program to reverse a string:
public class StringReverse {
    public static void main(String[] args) {
        String str = "hello";
        StringBuilder reversed = new StringBuilder();

        for (int i = str.length() - 1; i >= 0; i--) {
            reversed.append(str.charAt(i));
        }

        System.out.println("Reversed string: " + reversed);
    }
}
==============================================================================================================
14)Java program to separate zeros from non-zeros in an integer array:
public class SeparateZeros {
    public static void main(String[] args) {
        int[] arr = {0, 2, 0, 1, 3, 0, 5};

        int index = 0;
        for (int num : arr) {
            if (num != 0) {
                arr[index++] = num;
            }
        }

        while (index < arr.length) {
            arr[index++] = 0;
        }

        System.out.println("Array after separating zeros: " + Arrays.toString(arr));
    }
}
==================================================================================================================
15)Java code for printing a pyramid:
public class Pyramid {
    public static void main(String[] args) {
        int rows = 5;
        for (int i = 0; i < rows; i++) {
            for (int j = rows - i; j > 1; j--) {
                System.out.print(" ");
            }
            for (int j = 0; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
===============================================================================================================
16)Java program to find a missing number in an integer array:
public class MissingNumber {
    public static void main(String[] args) {
        int[] arr = {1, 2, 4, 5, 6};
        int n = arr.length + 1;
        int expectedSum = n * (n + 1) / 2;
        int actualSum = 0;

        for (int num : arr) {
            actualSum += num;
        }

        int missingNumber = expectedSum - actualSum;
        System.out.println("Missing number in the array: " + missingNumber);
    }
}
====================================================================================================
17)Java program to count occurrences of each element in an array:
import java.util.HashMap;
import java.util.Map;

public class ElementOccurrences {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 2, 1, 3, 4, 5, 4, 3};

        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        System.out.println("Element occurrences: " + countMap);
    }
}
=====================================================================================================
18)Java program to remove duplicate elements from an array:
import java.util.*;

public class RemoveDuplicatesFromArray {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 2, 4, 5, 6, 5, 7};

        Set<Integer> set = new HashSet<>();
        List<Integer> result = new ArrayList<>();

        for (int num : arr) {
            if (set.add(num)) {
                result.add(num);
            }
        }

        System.out.println("Array after removing duplicates: " + result);
    }
}
=================================================================================================================
19)Convert Integer to Roman String
public class IntegerToRoman {
    public static String intToRoman(int num) {
        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        StringBuilder sb = new StringBuilder();
        
        for (int i = 0; i < values.length && num >= 0; i++) {
            while (num >= values[i]) {
                num -= values[i];
                sb.append(symbols[i]);
            }
        }
        return sb.toString();
    }
}

=================================================================================================================
20) Find the Longest Palindromic Substring
public class LongestPalindromicSubstring {
    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private static int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
}

=================================================================================================================
21) Check if a Given String Contains Valid Parentheses
import java.util.Stack;

public class ValidParentheses {
    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == '(') stack.push(')');
            else if (c == '{') stack.push('}');
            else if (c == '[') stack.push(']');
            else if (stack.isEmpty() || stack.pop() != c) return false;
        }
        return stack.isEmpty();
    }
}

=================================================================================================================
22)Count the Number of Words in a String
public class WordCount {
    public static int countWords(String str) {
        if (str == null || str.isEmpty()) {
            return 0;
        }
        String[] words = str.trim().split("\\s+");
        return words.length;
    }
}

=================================================================================================================
23)Remove a Given Character from a String
public class RemoveCharacter {
    public static String removeChar(String str, char ch) {
        if (str == null) return null;
        return str.replace(Character.toString(ch), "");
    }
}

=================================================================================================================
24) Convert Roman Numeral String to Integer
import java.util.HashMap;
import java.util.Map;

public class RomanToInteger {
    public static int romanToInt(String s) {
        Map<Character, Integer> roman = new HashMap<>();
        roman.put('I', 1);
        roman.put('V', 5);
        roman.put('X', 10);
        roman.put('L', 50);
        roman.put('C', 100);
        roman.put('D', 500);
        roman.put('M', 1000);
        
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && roman.get(s.charAt(i)) > roman.get(s.charAt(i - 1))) {
                result += roman.get(s.charAt(i)) - 2 * roman.get(s.charAt(i - 1));
            } else {
                result += roman.get(s.charAt(i));
            }
        }
        return result;
    }
}

=================================================================================================================
25)Convert String to Integer
public class StringToInteger {
    public static int stringToInt(String str) {
        return Integer.parseInt(str);
    }
}

=================================================================================================================
26)Check if a Given String is Palindrome
public class PalindromeCheck {
    public static boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

=================================================================================================================
27)Check if Two Given Strings are Anagrams of Each Other
import java.util.Arrays;

public class AnagramCheck {
    public static boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) return false;
        char[] sArr = s.toCharArray();
        char[] tArr = t.toCharArray();
        Arrays.sort(sArr);
        Arrays.sort(tArr);
        return Arrays.equals(sArr, tArr);
    }
}

=================================================================================================================
28)Find the Smallest Substring in a Given String Containing All Characters of Another String
import java.util.HashMap;
import java.util.Map;

public class SmallestSubstringContainingAllChars {
    public static String minWindow(String s, String t) {
        if (s.length() == 0 || t.length() == 0) return "";

        Map<Character, Integer> dictT = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            dictT.put(t.charAt(i), dictT.getOrDefault(t.charAt(i), 0) + 1);
        }

        int required = dictT.size();
        int l = 0, r = 0;
        int formed = 0;
        Map<Character, Integer> windowCounts = new HashMap<>();
        int[] ans = {-1, 0, 0}; // length, left, right

        while (r < s.length()) {
            char c = s.charAt(r);
            windowCounts.put(c, windowCounts.getOrDefault(c, 0) + 1);

            if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {
                formed++;
            }

            while (l <= r && formed == required) {
                c = s.charAt(l);
                if (ans[0] == -1 || r - l + 1 < ans[0]) {
                    ans[0] = r - l + 1;
                    ans[1] = l;
                    ans[2] = r;
                }

                windowCounts.put(c, windowCounts.get(c) - 1);
                if (dictT.containsKey(c) && windowCounts.get(c).intValue() < dictT.get(c).intValue()) {
                    formed--;
                }
                l++;
            }
            r++;
        }
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}

=================================================================================================================
29) Finding the First Non-Repeating Character in a String
import java.util.LinkedHashMap;
import java.util.Map;

public class FirstNonRepeatingCharacter {
    public static void main(String[] args) {
        String str = "swiss";
        char result = findFirstNonRepeatingCharacter(str);
        if (result != 0) {
            System.out.println("The first non-repeating character is: " + result);
        } else {
            System.out.println("No non-repeating character found.");
        }
    }

    public static char findFirstNonRepeatingCharacter(String str) {
        Map<Character, Integer> charCountMap = new LinkedHashMap<>();

        // Count the occurrences of each character
        for (char ch : str.toCharArray()) {
            charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);
        }

        // Find the first character with a count of 1
        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            if (entry.getValue() == 1) {
                return entry.getKey();
            }
        }

        return 0; // Return 0 if no non-repeating character is found
    }
}

=================================================================================================================
30)Printing All Permutations of a String
public class StringPermutations {
    public static void main(String[] args) {
        String str = "ABC";
        System.out.println("Permutations of the string are:");
        printPermutations(str, "");
    }

    public static void printPermutations(String str, String prefix) {
        if (str.length() == 0) {
            System.out.println(prefix);
            return;
        }

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            String rem = str.substring(0, i) + str.substring(i + 1);
            printPermutations(rem, prefix + ch);
        }
    }
}

=================================================================================================================
31)Pyramid Program
public class PyramidPattern {
    public static void main(String[] args) {
        int rows = 5; // Number of rows for the pyramid
        for (int i = 1; i <= rows; i++) {
            for (int j = i; j < rows; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
32)Left Triangle Star Pattern
public class LeftTrianglePattern {
    public static void main(String[] args) {
        int rows = 5; // Number of rows for the pattern
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
33)Right Triangle Star Pattern
public class RightTrianglePattern {
    public static void main(String[] args) {
        int rows = 5; // Number of rows for the pattern
        for (int i = 1; i <= rows; i++) {
            for (int j = i; j < rows; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= i; k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
34)Diamond Shape Pattern Program
public class DiamondPattern {
    public static void main(String[] args) {
        int rows = 5; // Number of rows for the upper half of the diamond
        for (int i = 1; i <= rows; i++) {
            for (int j = i; j < rows; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (int i = rows - 1; i >= 1; i--) {
            for (int j = rows; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
35)Downward Triangle Star Pattern
public class DownwardTrianglePattern {
    public static void main(String[] args) {
        int rows = 5; // Number of rows for the pattern
        for (int i = rows; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
35) Mirrored Right Triangle Star Pattern
public class MirroredRightTrianglePattern {
    public static void main(String[] args) {
        int rows = 5; // Number of rows for the pattern
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j < i; j++) {
                System.out.print(" ");
            }
            for (int k = i; k <= rows; k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
37)Reversed Pyramid Star Pattern
public class ReversedPyramid {
    public static void main(String[] args) {
        int n = 5; // number of rows
        for (int i = n; i >= 1; i--) {
            for (int j = 1; j <= n - i; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
38) Right Down Mirror Star Pattern
public class RightDownMirror {
    public static void main(String[] args) {
        int n = 5; // number of rows
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print(" ");
            }
            for (int k = i; k < n; k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
39)Right Pascal’s Triangle
public class RightPascalsTriangle {
    public static void main(String[] args) {
        int n = 5; // number of rows
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (int i = n - 1; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
40)Left Triangle Pascal’s
public class LeftTrianglePascals {
    public static void main(String[] args) {
        int n = 5; // number of rows
        for (int i = 1; i <= n; i++) {
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= i; k++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (int i = n - 1; i >= 1; i--) {
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= i; k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
41)Sandglass Star Pattern
public class SandglassPattern {
    public static void main(String[] args) {
        int n = 5; // number of rows
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print(" ");
            }
            for (int k = i; k < n; k++) {
                System.out.print("*");
            }
            for (int l = i; l < n - 1; l++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (int i = n - 1; i > 0; i--) {
            for (int j = 1; j < i; j++) {
                System.out.print(" ");
            }
            for (int k = i; k <= n; k++) {
                System.out.print("*");
            }
            for (int l = i; l < n; l++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
42)Alphabet A Pattern
public class AlphabetAPattern {
    public static void main(String[] args) {
        int n = 7; // height of the pattern (odd number)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= n / 2; j++) {
                if ((j == 0 || j == n / 2) && i != 0 ||
                    i == 0 && j != 0 && j != n / 2 ||
                    i == n / 2) {
                    System.out.print("*");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}

=================================================================================================================
43)Triangle Star Pattern
public class TriangleStarPattern {
    public static void main(String[] args) {
        int n = 5; // number of rows
        for (int i = 1; i <= n; i++) {
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
44)Down Triangle
public class DownTriangle {
    public static void main(String[] args) {
        int n = 5; // number of rows
        for (int i = n; i >= 1; i--) {
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
45)Diamond Star Pattern
import java.util.Scanner;

public class DiamondStarPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        
        int n = rows / 2;
        
        // Upper part
        for (int i = 0; i <= n; i++) {
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 0; k < (2 * i + 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
        
        // Lower part
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 0; k < (2 * i + 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
46)Simple Number Program
import java.util.Scanner;

public class SimpleNumberProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = scanner.nextInt();
        
        if (num % 2 == 0) {
            System.out.println(num + " is an even number.");
        } else {
            System.out.println(num + " is an odd number.");
        }
        
        boolean isPrime = true;
        for (int i = 2; i <= num / 2; i++) {
            if (num % i == 0) {
                isPrime = false;
                break;
            }
        }
        
        if (isPrime && num > 1) {
            System.out.println(num + " is a prime number.");
        } else {
            System.out.println(num + " is not a prime number.");
        }
    }
}

=================================================================================================================
47)Number Pattern Program
import java.util.Scanner;

public class NumberPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
48)Diamond Pattern Program in Java
import java.util.Scanner;

public class DiamondPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        
        int n = rows / 2;
        
        // Upper part
        for (int i = 1; i <= n; i++) {
            for (int j = n; j >= i; j--) {
                System.out.print(" ");
            }
            for (int j = 1; j <= (2 * i - 1); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
        
        // Lower part
        for (int i = n - 1; i >= 1; i--) {
            for (int j = n; j >= i; j--) {
                System.out.print(" ");
            }
            for (int j = 1; j <= (2 * i - 1); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
49)Pascal’s Triangle Program in Java
import java.util.Scanner;

public class PascalsTriangle {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < rows - i; j++) {
                System.out.print(" ");
            }
            
            int number = 1;
            for (int j = 0; j <= i; j++) {
                System.out.print(number + " ");
                number = number * (i - j) / (j + 1);
            }
            System.out.println();
        }
    }
}

=================================================================================================================
50)Descending Order Pattern
import java.util.Scanner;

public class DescendingOrderPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        
        for (int i = rows; i >= 1; i--) {
            for (int j = i; j >= 1; j--) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
51)Reversed Pyramid Star Pattern:
public class ReversedPyramid {
    public static void main(String[] args) {
        int n = 5; // Number of rows
        for (int i = n; i > 0; i--) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < (2 * i - 1); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
52)Right Down Mirror Star Pattern:
public class RightDownMirror {
    public static void main(String[] args) {
        int n = 5; // Number of rows
        for (int i = n; i > 0; i--) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
53)Right Pascal’s Triangle:
public class RightPascalsTriangle {
    public static void main(String[] args) {
        int n = 5; // Number of rows
        // Upper part of the triangle
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
        // Lower part of the triangle
        for (int i = n - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
54)Left Triangle Pascal’s:
public class LeftPascalsTriangle {
    public static void main(String[] args) {
        int n = 5; // Number of rows
        // Upper part of the triangle
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
        // Lower part of the triangle
        for (int i = n - 1; i > 0; i--) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < i; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
55)Sandglass Star Pattern:
public class SandglassPattern {
    public static void main(String[] args) {
        int n = 5; // Number of rows
        // Upper part of the sandglass
        for (int i = n; i > 0; i--) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < (2 * i - 1); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
        // Lower part of the sandglass
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            for (int j = 0; j < (2 * i - 1); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

=================================================================================================================
56)Array Rotation Program in Java (Left Rotation):
public class LeftRotation {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int n = arr.length;
        int d = 2; // number of rotations

        leftRotate(arr, d, n);

        System.out.println("Rotated Array:");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    static void leftRotate(int[] arr, int d, int n) {
        for (int i = 0; i < d; i++) {
            leftRotateByOne(arr, n);
        }
    }

    static void leftRotateByOne(int[] arr, int n) {
        int temp = arr[0];
        for (int i = 0; i < n - 1; i++) {
            arr[i] = arr[i + 1];
        }
        arr[n - 1] = temp;
    }
}

=================================================================================================================
57)Array Rotation Program in Java (Right Rotation)
public class RightRotation {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int n = arr.length;
        int d = 2; // number of rotations

        rightRotate(arr, d, n);

        System.out.println("Rotated Array:");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    static void rightRotate(int[] arr, int d, int n) {
        for (int i = 0; i < d; i++) {
            rightRotateByOne(arr, n);
        }
    }

    static void rightRotateByOne(int[] arr, int n) {
        int temp = arr[n - 1];
        for (int i = n - 1; i > 0; i--) {
            arr[i] = arr[i - 1];
        }
        arr[0] = temp;
    }
}

=================================================================================================================
58)Java program to find array triplets such that sum of first two elements equals the third element:
import java.util.*;

public class TripletSum {
    static void findTriplets(int[] arr) {
        Arrays.sort(arr);
        int n = arr.length;
        for (int i = 0; i < n - 2; i++) {
            int j = i + 1, k = n - 1;
            while (j < k) {
                if (arr[i] + arr[j] == arr[k]) {
                    System.out.println(arr[i] + ", " + arr[j] + ", " + arr[k]);
                    j++;
                    k--;
                } else if (arr[i] + arr[j] < arr[k]) {
                    k--;
                } else {
                    j++;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 32, 1, 7, 10, 50, 19, 21, 2};
        findTriplets(arr);
    }
}

=================================================================================================================
59)Java program to find triplets in the given array whose sum is equal to given number:
import java.util.*;

public class TripletSum {
    static void findTriplets(int[] arr, int sum) {
        Arrays.sort(arr);
        int n = arr.length;
        for (int i = 0; i < n - 2; i++) {
            int j = i + 1, k = n - 1;
            while (j < k) {
                if (arr[i] + arr[j] + arr[k] == sum) {
                    System.out.println(arr[i] + ", " + arr[j] + ", " + arr[k]);
                    j++;
                    k--;
                } else if (arr[i] + arr[j] + arr[k] < sum) {
                    j++;
                } else {
                    k--;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 32, 1, 7, 10, 50, 19, 21, 2};
        int sum = 33;
        findTriplets(arr, sum);
    }
}

=================================================================================================================
60)write java code to sort an array of 0s, 1s and 2s in Java?
public class SortColors {
    public static void sortColors(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        int mid = 0;
        int temp;
        
        while (mid <= high) {
            switch(nums[mid]) {
                case 0:
                    temp = nums[low];
                    nums[low] = nums[mid];
                    nums[mid] = temp;
                    low++;
                    mid++;
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    temp = nums[mid];
                    nums[mid] = nums[high];
                    nums[high] = temp;
                    high--;
                    break;
            }
        }
    }

    public static void main(String[] args) {
        int[] nums = {2, 0, 1, 2, 1, 0};
        sortColors(nums);
        System.out.println("Sorted Array:");
        for (int num : nums) {
            System.out.print(num + " ");
        }
    }
}

=================================================================================================================


